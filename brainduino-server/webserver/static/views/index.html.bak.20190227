<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Neurohaxor: EEG in WebVR</title>
    <meta name="description" content="Neurohaxor">

    <script src="https://aframe.io/releases/0.8.2/aframe.min.js"></script>
    <script src="https://threejs.org/examples/js/math/Lut.js"></script>
    <script src="https://cdn.rawgit.com/archilogic-com/aframe-gblock/6498b71d/dist/gblock.js"></script>
    <script src="https://rawgit.com/blairmacintyre/aframe-look-at-billboard-component/master/dist/aframe-look-at-billboard-component.min.js"></script>
	<script src="https://unpkg.com/aframe-thumb-controls-component@1.1.0/dist/aframe-thumb-controls-component.min.js"></script>
	<script src="https://cdn.jsdelivr.net/gh/Micah1/Micah1.github.io@7c815cb4e7e1dd08dd37b54be8450702005ee73a/scripts/thy-laser-controls.js"></script>
	<script src="https://cdn.jsdelivr.net/gh/Micah1/Micah1.github.io@44166e25baea85fa46ae4213182333eff31ef2f2/scripts/turning.js"></script>
    <script src="https://unpkg.com/aframe-event-set-component@^4.0.0/dist/aframe-event-set-component.min.js"></script>
    <script src="https://unpkg.com/aframe-log-component/dist/aframe-log-component.min.js"></script> 
    <script src="https://rawgit.com/fernandojsg/aframe-teleport-controls/master/dist/aframe-teleport-controls.min.js"></script>
    <script src="https://rawgit.com/feiss/aframe-environment-component/master/dist/aframe-environment-component.min.js"></script>


<!--
    The event-set component gives you a quick way to add events
    to elements (like click, mouseenter, mouseleave, mousedown, mouseup, and fusing)
    without having to write Javascript for each event.
    
    For example if you want to give the user feedback when they hover over the element,
    you can do event-set__enter="_event: mouseenter; material.color: blue"
    -->
    <script src="https://unpkg.com/aframe-event-set-component@^4.0.0/dist/aframe-event-set-component.min.js"></script>
    
<script>
	// Micah added Dec 17 2018 for teleport and button specific functions
			var log_history = [];
			var menu_open = false;
			var MAX_LOGS = null;
			function VR_LOG(data) {
				log_history.push(JSON.stringify(data));
				if (MAX_LOGS && log_history.length > MAX_LOGS) {
				  log_history.shift()
				}
				const console = document.getElementById('vr_console');
				if (console) { console.setAttribute('value', log_history.join('\n')); }
			} 
			 window.onerror = e => VR_LOG("error" + e);
			const CLAMP_VELOCITY = 0.01;
			const MAX_DELTA = 0.2;
			const EPS = 10e-6;
			const MAX_WARNINGS = 10;
			const PI_2 = Math.PI / 2;
			
			AFRAME.registerComponent('thumb-movement-controls', {
				  init: function () {
					//up controller is down and down is up: fyi
					this.el.addEventListener('thumbupstart', () => {
					    VR_LOG('the laser click');
					});
					this.el.addEventListener('thumbupend', () => {
					});
					this.el.addEventListener('thumbrightstart', () => {
					    VR_LOG('right turn start');
					document.querySelector('a-scene').emit("rotateright");
					});
					this.el.addEventListener('thumbrightend', () => {
					document.querySelectorAll('.menu_plane').forEach(function(e){
						e.object3D.visible = true;
						});
					});
					this.el.addEventListener('thumbleftstart', () => {
					    VR_LOG('left turn start');
					document.querySelector('a-scene').emit("rotateleft");
					});
					this.el.addEventListener('thumbleftend', () => {
					document.querySelectorAll('.menu_plane').forEach(function(e){
						});
					});
					this.el.addEventListener('thumbdownstart', () => {
                        VR_LOG('teleport start');
					document.querySelectorAll('.menu_plane').forEach(function(e){
						e.object3D.visible = false;
						});
					});
					this.el.addEventListener('thumbdownend', () => {
                        VR_LOG('teleport end');
					});
				  }
			});
		
		</script>
  </head>
  <body>
    <a-scene>
        <a-assets>
            <img id="checkers" src="https://i.imgur.com/gtLbRf4.jpg">
        </a-assets>

		<a-entity environment="preset: tron"></a-entity>
		
		<!--Debug Console Inside VR-->
		<a-text id="vr_console" 
		geometry="primitive:plane; width: 0; height: 0"
		material="side:double; color: #000000"
		text="font:dejavu; baseline:bottom; anchor:center; align:center; value:Neurohaxor VR Console"
		position="0 5 -5"></a-text>
      

      <!-- Camera, cursor, controller -->
	<a-entity id="cameraRig">
		<a-entity id="cameraRig_1" character-controller="pivot: #head">
            <a-entity id="head" camera position="0 2 0" wasd-controls look-controls><a-cursor position="0 0 0" fuse="false"></a-cursor></a-entity>
			<a-entity teleport-controls="startEvents: thumbdownstart; endEvents: thumbdownend; cameraRig: #cameraRig; teleportOrigin: #head;"
					  thumb-controls thumb-movement-controls
					  my-laser-controls cursor="downEvents: thumbupstart; upEvents: thumbupend;"
					  raycaster="objects: .clickable; .links; far: 5" line="color: blue; opacity: 1; thickness: 7"></a-entity>
			<a-entity oculus-go-controls daydream-controls gearvr-controls></a-entity>
			<a-entity id="left-hand"
						vive-controls="hand: left"
						oculus-touch-controls="hand: left"
						windows-motion-controls="hand: left"
						></a-entity>
			<a-entity id="right-hand"
						vive-controls="hand: right"
						oculus-touch-controls="hand: right"
						windows-motion-controls="hand: right"
						></a-entity>
		</a-entity>
    </a-entity>
     
          
<a-box color="blue" height="-0.01" width="10" depth="15" position="0 0.1 -10" sound="src: url(http://lisarein.com/videos/timleary/tim.mp3; autoplay: true; on: click">
<a-animation attribute="rotation"
		       dur="500"
		       easing="linear"
		       fill="forwards"
		       to="0 90 60"
		       direction="alternate"
		       begin="click"></a-animation>
<a-animation attribute="position"
		       dur="500"
		       easing="linear"
		       fill="forwards"
		       to="0 3.5 -15"
		       direction="alternate"
		       begin="click"></a-animation>

<a-entity id="scatter_plot_container" position="0 1 0">
	
<a-entity id="scatter_plot" position="0 0 0"></a-entity>

	<a-entity position="4.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: rgamma" billboard></a-entity>
	<a-entity position="3.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: rbeta" billboard></a-entity>
	<a-entity position="2.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: ralpha" billboard></a-entity>
	<a-entity position="1.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: rtheta" billboard></a-entity>
	<a-entity position="0.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: rdelta" billboard></a-entity>
	<a-entity position="-0.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: ldelta" billboard></a-entity>
	<a-entity position="-1.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: ltheta" billboard></a-entity>
	<a-entity position="-2.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: lalpha" billboard></a-entity>
	<a-entity position="-3.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: lbeta" billboard></a-entity>
	<a-entity position="-4.5 1 6" rotation="0 0 30" text="font: aileronsemibold; width: 6.5; anchor: center; align: center; color: white; value: lgamma" billboard></a-entity>
</a-entity></a-box>
<!-- <a-plane id="spectrograph_plane" wireframe="false" geometry="buffer: true" material="shader: flat; vertexColors: vertex" color="#fff" height="40" width="20" position="0 -5 -30" rotation="-90 180 0" segments-width="9" segments-height="99"></a-plane> -->

    </a-scene>
    
<script>
	window.multiplier = 100;
	//we created a function where the audio starts in the web browser when you press k, web audio on ios does not auto play, so it will be important to include a button to start audio in WebVR
	//we installed a new text editor called vbcode, to run it type the word "code" into the terminal, it's super sweet in terms of its debug functions
	let notes = [852, 741, 639, 528, 417, 396, 852, 741, 639, 528, 417, 396];
	// setInterval(() => console.log(notes), 1000);
		//as a demo we overwrote the tones below
		// notes = [100, 200, 300, 400, 500, 852, 741, 639, 528, 417]
		let audioContext = new (window.AudioContext || window.webkitAudioContext)();
		window.audioContext = audioContext;
		let masterGainNode = null;
		let customWaveform = null;
		let sineTerms = null;
		let cosineTerms = null;
		// let volumeControl = document.querySelector("input[name='volume']");
		let volumeControl = [];
		volumeControl.value = 1;
		let playing = false;
		// let playButton = document.querySelector(".play");
		// playButton.onclick = togglePlay;
		function setup() {
			// volumeControl.addEventListener("change", changeVolume, false);	
			masterGainNode = audioContext.createGain();
			console.log(masterGainNode)
			masterGainNode.connect(audioContext.destination);
			masterGainNode.gain.value = volumeControl.value;
			sineTerms = new Float32Array([0, 0, 1, 0, 1]);
			cosineTerms = new Float32Array(sineTerms.length);
			customWaveform = audioContext.createPeriodicWave(cosineTerms, sineTerms);
		}
		function changeVolume(event) {
			masterGainNode.gain.value = volumeControl.value;
		}
		function playTone(freq) {
			let osc = audioContext.createOscillator();
			osc.connect(masterGainNode);
			osc.type = 'sine';
			osc.frequency.value = freq;
			osc.start();
				
			return osc;
		}
		setup();
		function doAudioStuff() {
			var accordium = [];
			for (i=0; i<10; i++) {
				accordium[i] = [];
			}
			accordium[0] = playTone(notes[0]);
			accordium[1] = playTone(notes[1]);
			accordium[2] = playTone(notes[2]);
			accordium[3] = playTone(notes[3]);
			accordium[4] = playTone(notes[4]);
			accordium[5] = playTone(notes[5]);
			accordium[6] = playTone(notes[6]);
			accordium[7] = playTone(notes[7]);
			accordium[8] = playTone(notes[8]);
			accordium[9] = playTone(notes[9]);
		};
		function togglePlay() {
			if(playing) {
				for (acc of accordium) {
					acc.stop();
				}
				playing = false;
			} else {
				accordium[0] = playTone(notes[0]);
				accordium[1] = playTone(notes[1]);
				accordium[2] = playTone(notes[2]);
				accordium[3] = playTone(notes[3]);
				accordium[4] = playTone(notes[4]);
				accordium[5] = playTone(notes[5]);
				accordium[6] = playTone(notes[6]);
				accordium[7] = playTone(notes[7]);
				accordium[8] = playTone(notes[8]);
				accordium[9] = playTone(notes[9]);
				playing = true;
			}
		};
	//press k after you load the webpage to start audio
	document.addEventListener("keypress", event => {
		if(event.key == 'k') {
			console.log("audio");
			console.log(notes);
			doAudioStuff();
		}
	})
		
	// we're gonnaa programmatically interact with Three.js scene.
	// adding objects and spraying magic dust
	scene = document.querySelector("a-scene")
	
	/*
	// get three.js object from aframe entity
        var scatter_plot_container = document.querySelector('#scatter_plot_container');
	var object = scatter_plot_container.getObject3D('mesh');

	// compute bounding box
	var bbox = new THREE.Box3().setFromObject(obj);
	console.log(bbox.min, bbox.max)
	*/



	// scatter plot is a parent 3D object with nested box points.
	// you can move the scatter_plot object, and all the points will follow.
	scatter_plot = document.getElementById("scatter_plot").object3D
	//scene.object3D.add(scatter_plot)
	plot_container = document.getElementById("scatter_plot_container")
	plot_container.object3D.add(scatter_plot)
    
    function create_box_point() {
		s = new THREE.Mesh(
            new THREE.PlaneBufferGeometry( 1, 1, 1 ),
            new THREE.MeshBasicMaterial( {color: 0xffff00, side: THREE.DoubleSide} ),
            )
		
		scatter_plot.add(s)
		return s
	}
	scatter_plot_points = []

	for (i=0; i < 40; i++) {
		for (j=0; j < 10; j++) {
			box = create_box_point(0.1)
            scatter_plot_points.push(box)
            box.rotation.y = 90
            box.position.z = 5 - i * .3
			box.position.x = j - 4.5
			// giving boxes names so we can add sound to specific boxes, find by name, search for box 0:0 (scene.findObjectByName('0:0')
            // if I had spheres before i I could append "spheres" in front of i for example
			box.name = "box"+i+":"+j
		}
	}
	scatter_plot.position.z = -10
	//plot_container.object3D.rotation.y = -90
       
 

	/*
	document.addEventListener('click', function (evt) {
		console.log('plot container clicked!')
	});
	*/
	
	  
	// alternatively we tried to work with a mesh and manipulate it's points.
	// spoiler alert: the vertex coloring part was a mess and didn't work out in one night.
	// spectrograph_plane = document.getElementById("spectrograph_plane")
	// spectrograph_geometry = spectrograph_plane.object3DMap.mesh.geometry


        // provides a stream of data after main.py has been run.
	var ws = new WebSocket("ws://{{ .addr }}/ws/client")


	// data coming in from ECG will be stored in readings_history ledger.
	// every reading is an array of ten values
	// we'll try to keep only a 100 of records
	// POOR CODE QUALITY WARNING: this magic number 100 is also hardcoded into scatter plot generation
	// so... just beware
	readings_history = []
	function get_reading_data(gen) {
		return readings_history[gen] || [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
	}

	// Color Lookup Table is an awesome thing
	// you create one with one of awailable spectrums, define the amount of
	// color gradations and a linear scale to map to.
	// you can then get a color for a specific value like Lut.getColor(15.67)
	colors_lut = new THREE.Lut('rainbow', 512)
	colors_lut.setMin(0)
	colors_lut.setMax(4)

	ws.onmessage = function (event) {
	
		// created an array here to read out data from the arduino chip.
		// We split with a space. The first value is the right reader, 
		// the second is the left reader.
		var data = JSON.parse(event.data);
		if (data.Name == "fft") {
			var fft_readings = data.Channels;
			// Normalize the channels
			// Ex: [1, 2, 3, 4] => [0.1, 0.2, 0.3, 0.4]
			// Ex: [10, 20, 30, 40] => [0.1, 0.2, 0.3, 0.4]
			var lchan_sum = fft_readings[0].reduce(function(x, y) { return x + y }, 0)
			fft_readings[0] = fft_readings[0].map(function(x) { return x / lchan_sum })
			var rchan_sum = fft_readings[1].reduce(function(x, y) { return x + y }, 0)
			fft_readings[1] = fft_readings[1].map(function(x) { return x / rchan_sum })
			var lchans = {"gamma":fft_readings[0].slice(30, 45, fft_readings[1].length).reduce(function(x, y) { return  x + y }, 0),
						   "beta" :fft_readings[0].slice(13, 30).reduce(function(x, y) { return x + y }, 0),
						   "alpha":fft_readings[0].slice(8, 12).reduce(function(x, y) { return x + y }, 0),
						   "theta":fft_readings[0].slice(4, 7.75).reduce(function(x, y) { return x + y }, 0),
						   "delta":fft_readings[0].slice(2, 4).reduce(function(x, y) { return x + y }, 0)}
			var rchans = {"gamma":fft_readings[1].slice(30, 45, fft_readings[1].length).reduce(function(x, y) { return x + y }, 0),
						   "beta" :fft_readings[1].slice(13, 30).reduce(function(x, y) { return x + y }, 0),
						   "alpha":fft_readings[1].slice(8, 12).reduce(function(x, y) { return x + y }, 0),
						   "theta":fft_readings[1].slice(4, 7.75).reduce(function(x, y) { return x + y }, 0),
						   "delta":fft_readings[1].slice(2, 4).reduce(function(x, y) { return x + y }, 0)}
		} else if (data.Name == "sample") {
			var eeg_readings = data.Channels;
			return
		}

		// changing the string to a decimal by dividing or 
		// multiplying the strings given by our raw data
		// there is too much variance. Division, modifies the range of physical 
		// bounds variance but not the time update variance
		var lgamma = lchans.gamma
		var rgamma = rchans.gamma
		var lbeta = lchans.beta
		var rbeta = rchans.beta
		var lalpha = lchans.alpha
		var ralpha = rchans.alpha
		var ltheta = lchans.theta
		var rtheta = rchans.theta
		var ldelta = lchans.delta
		var rdelta = rchans.delta

		notes = [rgamma, rbeta, ralpha, rtheta, rdelta, ldelta, ltheta, lalpha, lbeta, lgamma].map(v => v*1000).map(v => v+ ((250 - v) * 2));
		//doAudioStuff();
		console.log(notes)
		//notes = [ldelta, ldelta, ldelta, ldelta, ldelta, ldelta, ldelta, ldelta, ldelta, ldelta].map(v => v*1000).map(v => v+ ((250 - v) * 2));
		// preparing and storing the readings data
		data = [rgamma, rbeta, ralpha, rtheta, rdelta, ldelta, ltheta, lalpha, lbeta, lgamma]
		readings_history.unshift(data)
		readings_history = readings_history.slice(0, 40)

		// for (let noise_idx=0; noise_idx<10; noise_idx++) {
		// 	let noise_value = ((lbeta+rbeta)/2) * 100;
		// 	notes[noise_idx] = noise_value + ((250 - noise_value) * Math.pow(2, (250-noise_value)/50));
		// }

		// animating methes, points, etc.
		for (generation = 0; generation < 40; generation++) {
			data = get_reading_data(generation)
		        for (idx in data) {
			  // calculate the vertex/point index that we're going to update,
			  // as well as the color
			  vertice_idx = generation * 10 + (+idx)
			  scaled_value = data[idx] * 10
			  point_color = colors_lut.getColor(scaled_value)

			  // here we manipulated the spectrograph mesh geometry and vertex colors.
			  // the latter one didn't quite work out
			  /* spectrograph_geometry.vertices[vertice_idx].z = scaled_value
			  //if (scaled_value > 0) console.log(scaled_value, point_color)
			  face = spectrograph_geometry.faces[generation * 9 + 2 * (+idx)]
			  face.color.set(point_color)
			  face = spectrograph_geometry.faces[generation * 9 + 2 * (+idx) + 1]
			  face.color.set(point_color) */

			  // updating point cloud
			//   let noise_value = scaled_value * 100;
			//   notes[idx] = noise_value + ((250 - noise_value) * 2);
			  scatter_plot_points[vertice_idx].position.y = scaled_value
			  scatter_plot_points[vertice_idx].material.color = point_color
			}
			// console.log(notes);
		}
	
		// this is required to notify mesh that it's internal geometry was updated. 
		// spectrograph_geometry.verticesNeedUpdate = true
		// spectrograph_geometry.colorsNeedUpdate = true
		
		// scatter_plot: from Russia with love
		// https://github.com/vintlucky777
		// vintlucky777@gmail.com
	};
</script>


   
  </body>
</html>
